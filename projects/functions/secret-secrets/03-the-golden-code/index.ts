// Write your createCodeCracker function here! âœ¨
// You'll need to export it so the tests can run it.

/* Parameters:

1. An object with the following properties:

- `attempts`: How many code cracking attempts should be made
- `makeGuess`: A function that has...
  - Parameters:
    1. `text`: Any string
    2. `attempt`: Which number attempt is happening
  - Return: A string to use as a guess
- `validateGuess`: A function that has...
  - Parameters:
    1. `guess`: Any string
  - Return: Whether the guess was correct

Return: a function with:

- Parameters:
  1. `text`: Any string
- Return: The first guess generated by calling `makeGuess` where `validateGuess` returned `true`, or `undefined` if none ever did */

export type makeGuessType = (text: string, attempt: number) => string;
export type validateGuessType = (guess: string) => boolean;
export type guessParams = {
	attempts: number;
	makeGuess: makeGuessType;
	validateGuess: validateGuessType;
};

export function createCodeCracker(params: guessParams) {
	return (text: string) => {
		for (let currAttempt = 0; currAttempt < params.attempts; currAttempt++) {
			const guess = params.makeGuess(text, currAttempt);
			if (params.validateGuess(guess)) {
				return guess;
			}
		}
		return undefined;
	};
}
